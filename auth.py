import os
from typing import Set
import logging

logger = logging.getLogger(__name__)

class AuthManager:
    def __init__(self):
        self.admin_password = os.getenv("ADMIN_PASSWORD", "default_password")
        self.authenticated_users: Set[int] = set()

    def authenticate(self, user_id: int, password: str) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if password == self.admin_password:
            self.authenticated_users.add(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            return True
        logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False

    def is_authenticated(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return user_id in self.authenticated_users

    def logout(self, user_id: int):
        """–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        self.authenticated_users.discard(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")

    def require_auth(self, func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        async def wrapper(*args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–æ–±—ã—á–Ω–æ message.from_user.id)
            message = args[0] if args else None
            if not message or not hasattr(message, 'from_user'):
                return await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

            if not self.is_authenticated(message.from_user.id):
                return await message.answer(
                    "üîê –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /login <–ø–∞—Ä–æ–ª—å> –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."
                )

            return await func(*args, **kwargs)
        return wrapper