from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile
import asyncio
import logging
import os
from datetime import datetime
from typing import Dict, Any
from dotenv import load_dotenv

from auth import AuthManager
from image_processor import DocumentProcessor

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = logging.getLogger(__name__)
user_logger = logging.getLogger('user_activity')

class DocumentFillStates(StatesGroup):
    waiting_for_template = State()
    waiting_for_data = State()
    waiting_for_config = State()

class DocumentBot:
    def __init__(self, bot_token: str):
        self.bot = Bot(token=bot_token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.auth_manager = AuthManager()
        self.document_processor = DocumentProcessor()

        # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        admin_id_str = os.getenv("ADMIN_ID", "")
        self.admin_id = int(admin_id_str) if admin_id_str.isdigit() else None

        if self.admin_id:
            logger.info(f"Admin ID configured: {self.admin_id}")
        else:
            logger.warning("No admin ID configured - admin commands will be disabled")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_login, Command("login"))
        self.dp.message.register(self.cmd_logout, Command("logout"))
        self.dp.message.register(self.cmd_templates, Command("templates"))
        self.dp.message.register(self.cmd_fill, Command("fill"))
        self.dp.message.register(self.cmd_config, Command("config"))

        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.cmd_logs, Command("logs"))
        self.dp.message.register(self.cmd_stats, Command("stats"))

        # FSM handlers
        self.dp.message.register(self.process_template_selection, DocumentFillStates.waiting_for_template)
        self.dp.message.register(self.process_data_input, DocumentFillStates.waiting_for_data)
        self.dp.message.register(self.process_config_input, DocumentFillStates.waiting_for_config)

    async def cmd_start(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = """
ü§ñ **–ë–æ—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

üîê **–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**
`/login <–ø–∞—Ä–æ–ª—å>` - –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
`/templates` - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
`/fill` - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
`/config` - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞
`/help` - –ø–æ–º–æ—â—å
`/logout` - –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
        """
        await message.answer(welcome_text, parse_mode="Markdown")

    async def cmd_help(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/login <–ø–∞—Ä–æ–ª—å>` - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
‚Ä¢ `/templates` - —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ `/fill` - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã–º–∏
‚Ä¢ `/config` - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–µ–π

**–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:**
1. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É: `/login your_password`
2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω—ã: `/templates`
3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç: `/fill`
4. –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞
5. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–ø–æ–ª–µ=–∑–Ω–∞—á–µ–Ω–∏–µ`

**–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:**
```
–∏–º—è=–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
–¥–æ–ª–∂–Ω–æ—Å—Ç—å=–ú–µ–Ω–µ–¥–∂–µ—Ä
–¥–∞—Ç–∞=01.01.2024
```

**–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–∞:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/config` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª–µ–π –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.
        """

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if self.admin_id and message.from_user.id == self.admin_id:
            help_text += """

**–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
‚Ä¢ `/logs` - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
            """

        await message.answer(help_text, parse_mode="Markdown")

    async def cmd_login(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /login"""
        user_id = message.from_user.id
        username = message.from_user.username or "Unknown"
        first_name = message.from_user.first_name or "Unknown"

        user_logger.info(f"LOGIN_ATTEMPT - User: {user_id} (@{username}, {first_name})")

        args = message.text.split(' ', 1)
        if len(args) < 2:
            user_logger.info(f"LOGIN_FAILED - User: {user_id} - Reason: No password provided")
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: `/login <–ø–∞—Ä–æ–ª—å>`", parse_mode="Markdown")
            return

        password = args[1]
        if self.auth_manager.authenticate(user_id, password):
            user_logger.info(f"LOGIN_SUCCESS - User: {user_id} (@{username}, {first_name})")
            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        else:
            user_logger.info(f"LOGIN_FAILED - User: {user_id} (@{username}, {first_name}) - Reason: Wrong password")
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")

    async def cmd_logout(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /logout"""
        self.auth_manager.logout(message.from_user.id)
        await message.answer("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")

    async def cmd_templates(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
        if not self.auth_manager.is_authenticated(message.from_user.id):
            await message.answer("üîê –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /login <–ø–∞—Ä–æ–ª—å> –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.")
            return

        templates = self.document_processor.get_available_templates()

        if not templates:
            await message.answer("üìÑ –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        template_list = "\n".join([f"‚Ä¢ {template}" for template in templates])
        await message.answer(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:\n\n{template_list}")

    async def cmd_fill(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        if not self.auth_manager.is_authenticated(message.from_user.id):
            await message.answer("üîê –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /login <–ø–∞—Ä–æ–ª—å> –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.")
            return

        templates = self.document_processor.get_available_templates()

        if not templates:
            await message.answer("üìÑ –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        template_list = "\n".join([f"{i+1}. {template}" for i, template in enumerate(templates)])

        await message.answer(
            f"üìã –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n{template_list}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )

        await state.update_data(templates=templates)
        await state.set_state(DocumentFillStates.waiting_for_template)

    async def process_template_selection(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
        data = await state.get_data()
        templates = data.get('templates', [])

        selected_template = None

        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
        try:
            index = int(message.text) - 1
            if 0 <= index < len(templates):
                selected_template = templates[index]
        except ValueError:
            # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            for template in templates:
                if message.text.lower() in template.lower():
                    selected_template = template
                    break

        if not selected_template:
            await message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞
        config = self.document_processor.load_template_config(selected_template)
        if not config:
            await message.answer(
                f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞ '{selected_template}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /config –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–µ–π."
            )
            await state.clear()
            return

        fields = list(config.get('fields', {}).keys())
        if not fields:
            await message.answer(f"‚ùå –ü–æ–ª—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞ '{selected_template}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
            await state.clear()
            return

        fields_list = "\n".join([f"‚Ä¢ {field}" for field in fields])

        await message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {selected_template}\n\n"
            f"üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:\n{fields_list}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"–ø–æ–ª–µ1=–∑–Ω–∞—á–µ–Ω–∏–µ1\n"
            f"–ø–æ–ª–µ2=–∑–Ω–∞—á–µ–Ω–∏–µ2\n\n"
            f"–ö–∞–∂–¥–æ–µ –ø–æ–ª–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."
        )

        await state.update_data(selected_template=selected_template, fields=fields)
        await state.set_state(DocumentFillStates.waiting_for_data)

    async def process_data_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
        data = await state.get_data()
        selected_template = data.get('selected_template')

        if not selected_template:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            await state.clear()
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        fill_data = {}
        lines = message.text.strip().split('\n')

        for line in lines:
            if '=' in line:
                key, value = line.split('=', 1)
                fill_data[key.strip()] = value.strip()

        if not fill_data:
            await message.answer(
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "`–ø–æ–ª–µ=–∑–Ω–∞—á–µ–Ω–∏–µ`"
            )
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_filename = f"filled_{timestamp}_{selected_template}"
        output_path = os.path.join("filled_documents", output_filename)

        success = self.document_processor.fill_document(
            selected_template, fill_data, output_path
        )

        if success:
            try:
                user_id = message.from_user.id
                username = message.from_user.username or "Unknown"
                user_logger.info(f"DOCUMENT_FILLED - User: {user_id} (@{username}) - Template: {selected_template} - Fields: {list(fill_data.keys())}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                photo = FSInputFile(output_path)
                await message.answer_photo(
                    photo,
                    caption=f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω!\n\n"
                           f"üìÑ –®–∞–±–ª–æ–Ω: {selected_template}\n"
                           f"üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {', '.join(fill_data.keys())}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                user_logger.error(f"DOCUMENT_SEND_ERROR - User: {message.from_user.id} - Error: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        else:
            user_logger.error(f"DOCUMENT_FILL_ERROR - User: {message.from_user.id} - Template: {selected_template}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")

        await state.clear()

    async def cmd_config(self, message: types.Message, state: FSMContext):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π —à–∞–±–ª–æ–Ω–∞"""
        if not self.auth_manager.is_authenticated(message.from_user.id):
            await message.answer("üîê –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /login <–ø–∞—Ä–æ–ª—å> –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.")
            return

        await message.answer(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π —à–∞–±–ª–æ–Ω–∞**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "```json\n"
            "{\n"
            '  "template_name": "document.jpg",\n'
            '  "fields": {\n'
            '    "–∏–º—è": {"x": 100, "y": 200, "font_size": 24},\n'
            '    "–¥–∞—Ç–∞": {"x": 300, "y": 400, "font_size": 20}\n'
            "  }\n"
            "}\n"
            "```",
            parse_mode="Markdown"
        )
        await state.set_state(DocumentFillStates.waiting_for_config)

    async def process_config_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            import json
            config = json.loads(message.text)

            template_name = config.get('template_name')
            fields = config.get('fields', {})

            if not template_name or not fields:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                return

            success = self.document_processor.save_template_config(template_name, config)

            if success:
                await message.answer(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è '{template_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

        except json.JSONDecodeError:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

        await state.clear()

    async def cmd_logs(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
        if not self.admin_id:
            await message.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        if message.from_user.id != self.admin_id:
            await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        try:
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –∏–∑ user_activity.log
            if os.path.exists("user_activity.log"):
                with open("user_activity.log", "r", encoding="utf-8") as f:
                    lines = f.readlines()
                    recent_logs = lines[-20:] if len(lines) > 20 else lines

                if recent_logs:
                    log_text = "".join(recent_logs)
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ
                    if len(log_text) > 4000:
                        parts = [log_text[i:i+4000] for i in range(0, len(log_text), 4000)]
                        for i, part in enumerate(parts):
                            await message.answer(f"üìä –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n```\n{part}\n```", parse_mode="Markdown")
                    else:
                        await message.answer(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n```\n{log_text}\n```", parse_mode="Markdown")
                else:
                    await message.answer("üìä –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—É—Å—Ç—ã.")
            else:
                await message.answer("üìä –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.")

    async def cmd_stats(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
        if not self.admin_id:
            await message.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        if message.from_user.id != self.admin_id:
            await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = {
                'total_logins': 0,
                'successful_logins': 0,
                'failed_logins': 0,
                'documents_filled': 0,
                'unique_users': set()
            }

            if os.path.exists("user_activity.log"):
                with open("user_activity.log", "r", encoding="utf-8") as f:
                    for line in f:
                        if "LOGIN_ATTEMPT" in line:
                            stats['total_logins'] += 1
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ —Å—Ç—Ä–æ–∫–∏
                            try:
                                user_part = line.split("User: ")[1].split(" ")[0]
                                stats['unique_users'].add(user_part)
                            except:
                                pass
                        elif "LOGIN_SUCCESS" in line:
                            stats['successful_logins'] += 1
                        elif "LOGIN_FAILED" in line:
                            stats['failed_logins'] += 1
                        elif "DOCUMENT_FILLED" in line:
                            stats['documents_filled'] += 1

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã
            templates = self.document_processor.get_available_templates()
            template_count = len(templates) if templates else 0

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            filled_count = 0
            if os.path.exists("filled_documents"):
                filled_count = len([f for f in os.listdir("filled_documents") if f.endswith(('.jpg', '.png', '.jpeg'))])

            stats_text = f"""üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(stats['unique_users'])}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞: {stats['total_logins']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤: {stats['successful_logins']}
‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤: {stats['failed_logins']}

üìÑ **–î–æ–∫—É–º–µ–Ω—Ç—ã:**
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤: {template_count}
‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats['documents_filled']}
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {filled_count}

üîê **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –¢–µ–∫—É—â–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö: {len(self.auth_manager.authenticated_users)}
"""

            await message.answer(stats_text, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await self.dp.start_polling(self.bot)